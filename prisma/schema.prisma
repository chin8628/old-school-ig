datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String @default("") @db.Text

  vibeSongId Int?
  vibeSong   VibeSong? @relation(fields: [vibeSongId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  Media Media[]

  userId Int?
  user   User? @relation(fields: [userId], references: [id])
}

enum MediaType {
  PHOTO
}

model Media {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(now())

  type MediaType

  fileName     String?
  shutterSpeed String?
  fNumber      String?
  maker        String?
  model        String?
  lensModel    String?
  capturedAt   DateTime?
  imageHeight  String?
  imageWidth   String?
  iso          String?
  focalLength  String?

  Post   Post? @relation(fields: [postId], references: [id])
  postId Int?
}

model VibeSong {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  youtubeId String?
  startTime Int?
  endTime   Int?

  Post Post[]
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  publicUserId String @unique
  username     String @unique
  email        String @unique
  password     String
  salt         String

  resetPassword ResetPassword[]

  displayName String
  shortBio    String
  avatarUrl   String?

  Post Post[]
}

model ResetPassword {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token    String   @unique
  userId   Int
  user     User     @relation(fields: [userId], references: [id])
  expireAt DateTime
}
